{"version":3,"sources":["GlobalStyle.js","features/tasks/Form/styled.js","features/tasks/tasksSlice.js","features/tasks/Form/index.js","features/tasks/TasksList/styled.js","features/tasks/TasksList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/Tasks.js","useTasks.js","App.js","reportWebVitals.js","store.js","index.js"],"names":["GlobalStyle","createGlobalStyle","_templateObject","_taggedTemplateLiteral","FormField","styled","form","Input","input","_templateObject2","Button","button","_templateObject3","tasksSlice","createSlice","name","initialState","tasks","hideDone","allDone","reducers","addTask","_ref","_ref2","newTask","payload","push","toggleHideDone","state","toggleTaskDone","_ref3","_ref4","taskId","index","findIndex","_ref5","id","done","setAllDone","forEach","removeTask","_ref6","_ref7","_ref8","splice","_tasksSlice$actions","actions","selectTasksState","selectTasks","selectHideDone","selectIsEveryTaskDone","every","_ref9","selectIsTaskEmpty","length","Form","_useState","useState","_useState2","_slicedToArray","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","React","createElement","onSubmit","event","preventDefault","content","trim","nanoid","ref","value","type","placeholder","onChange","target","onClick","current","focus","hover","active","List","ul","Item","li","hidden","css","Content","span","_templateObject4","_templateObject5","_templateObject6","toggleDone","_templateObject7","remove","_templateObject8","TaskList","_useSelector","useSelector","map","task","key","ButtonField","div","disabled","Buttons","isEveryTaskDone","isTaskEmpty","className","Fragment","SectionBody","section","Header","header","Title","h2","Section","title","body","extraHeaderContent","Main","main","Container","children","Tasks","addNewTask","JSON","parse","localStorage","getItem","setTasks","useEffect","setItem","stringify","concat","_toConsumableArray","useTasks","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","tasksReducer","ReactDOM","createRoot","document","getElementById","render","StrictMode","Provider","store"],"mappings":"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","file":"static/js/main.8ae49612.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n\r\n    html {\r\n        box-sizing: border-box;\r\n        background-color: #eeee;\r\n        margin-left: auto;\r\n        margin-right: auto;\r\n        font-family: 'Montserrat';\r\n    }\r\n  \r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n  \r\n    body {\r\n        word-break: break-word;\r\n        overflow-wrap: break-word;\r\n     }\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const FormField = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n    padding: 20px;\r\n\r\n    @media (max-width: 767px) {\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    padding: 10px;\r\n    border: 1px solid black;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    background-color:hsl(180, 100%, 25%);\r\n    color: white;\r\n    padding: 10px;\r\n    transition: 1s;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n        background: hsl(180, 100%, 35%);\r\n        transform: scale(1.1);\r\n    }\r\n\r\n     &:active {\r\n        background: hsl(180, 100%, 35%);\r\n    }\r\n`;","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: [],\r\n        hideDone: false,\r\n        allDone: false,\r\n    },\r\n    reducers: {\r\n        //  ({ stan (poprzedni) }, {akcja})\r\n        addTask: ({ tasks }, { payload: newTask }) => {\r\n            tasks.push(newTask);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks[index].done = !tasks[index].done;\r\n        },\r\n        setAllDone: state => {\r\n            state.tasks.forEach(tasks => {\r\n                tasks.done = true;\r\n            })\r\n        },\r\n        removeTask: ({ tasks }, { payload: taskId }) => {\r\n            const index = tasks.findIndex(({ id }) => id === taskId);\r\n            tasks.splice(index, 1);\r\n        },\r\n    },\r\n});\r\n\r\n//export funkcji addTask\r\nexport const { addTask, toggleHideDone, toggleTaskDone, setAllDone, removeTask } = tasksSlice.actions;\r\n//selektor (z caÅ‚ego state daje nam tylko tasks)\r\nexport const selectTasksState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = state => selectTasksState(state).hideDone;\r\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({done}) => done);\r\nexport const selectIsTaskEmpty = state => selectTasks(state).length === 0;\r\n//export reducera\r\nexport default tasksSlice.reducer;","import React, { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { FormField, Input, Button } from \"./styled\";\r\nimport { addTask } from \"../tasksSlice\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (newTaskContent === \"\") {\r\n            return;\r\n        }\r\n\r\n        dispatch(addTask({\r\n            content: newTaskContent.trim(),\r\n            done: false,\r\n            id: nanoid(),\r\n        }));\r\n\r\n        setNewTaskContent(\"\");\r\n    };\r\n\r\n    const focusInput = () => {\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    return (\r\n        <FormField onSubmit={onFormSubmit}>\r\n            <Input\r\n                ref={inputRef}\r\n                value={newTaskContent}\r\n                type=\"text\"\r\n                id=\"myText\"\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <Button\r\n                onClick={focusInput}\r\n                hover\r\n                active\r\n            >\r\n                Dodaj zadanie\r\n            </Button>\r\n        </FormField>\r\n    )\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0px;\r\n    word-break: break-word;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    padding: 20px;\r\n    align-items: center;\r\n    border-bottom: 1px solid #ddd;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n\r\n    @media(max-width: 767px) {\r\n        padding: 5px;\r\n    }\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    color: white;\r\n    width: 40px;\r\n    height: 40px;\r\n    padding: 0;\r\n    transition: 1s;\r\n    cursor: pointer;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background: hsl(120, 100%, 25%);\r\n\r\n        &:hover {\r\n            background: hsl(120, 100%, 35%);\r\n        }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background: hsl(0, 100%, 50%);\r\n\r\n        &:hover {\r\n            background: hsl(0, 100%, 60%);\r\n        }\r\n    `}\r\n\r\n`;","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { List, Item, Content, Button } from \"./styled\";\r\nimport { selectTasksState, toggleTaskDone, removeTask } from \"../tasksSlice\";\r\n\r\nconst TaskList = () => {\r\n  const { tasks, hideDone } = useSelector(selectTasksState);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <List>\r\n      {tasks.map(task => (\r\n        <Item\r\n          key={task.id}\r\n          hidden={task.done && hideDone}\r\n        >\r\n          <Button\r\n            onClick={() => dispatch(toggleTaskDone(task.id))}\r\n            toggleDone\r\n          >\r\n            {task.done ? \"âœ”\" : \"\"}\r\n          </Button>\r\n          <Content done={task.done}>\r\n            {task.content}\r\n          </Content>\r\n          <Button\r\n            onClick={() => dispatch(removeTask(task.id))}\r\n            remove\r\n          >\r\n            ðŸ—‘\r\n          </Button>\r\n        </Item>\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default TaskList;","import styled, { css } from \"styled-components\";\r\n\r\nexport const ButtonField = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    background-color: white;\r\n    border: none;\r\n    color:teal;\r\n    width: 170px;\r\n    height: 50px ;\r\n    transition: 1s;\r\n    padding: 1%;\r\n    cursor: pointer;\r\n\r\n    ${({ disabled }) => disabled && css`\r\n        color: #ccc;\r\n    `}\r\n\r\n    ${({ hover }) => hover && css`\r\n        color: hsl(180, 100%, 35%);\r\n    `}\r\n\r\n    @media(max-width: 767px) {\r\n        flex-basis: 100%;\r\n        margin: 0;\r\n        padding: 0,5%;\r\n    }\r\n`;","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { ButtonField, Button } from \"./styled\";\r\nimport { toggleHideDone, setAllDone, selectIsEveryTaskDone, selectIsTaskEmpty, selectHideDone } from \"../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n  const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n  const isTaskEmpty = useSelector(selectIsTaskEmpty);\r\n  const hideDone = useSelector(selectHideDone);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <ButtonField className=\"buttons\">\r\n      {!isTaskEmpty && (\r\n        <>\r\n          <Button\r\n            onClick={() => dispatch(toggleHideDone())}\r\n          >\r\n            {hideDone ? \"PokaÅ¼\" : \"Ukryj\"} ukoÅ„czone\r\n          </Button>\r\n          <Button\r\n            onClick={() => dispatch(setAllDone())}\r\n            disabled={isEveryTaskDone}\r\n          >\r\n            UkoÅ„cz wszystkie\r\n          </Button>\r\n        </>\r\n      )}\r\n    </ButtonField>\r\n  );\r\n}\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const SectionBody = styled.section`\r\n    background-color: white;\r\n    margin: 10px 0;\r\n    box-shadow: 2px #0000;\r\n    display: block;\r\n\r\n    @media(max-width: 767px) {\r\n        padding: 15px;\r\n    }\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    justify-content: space-between;\r\n    border-bottom: 1px solid #ddd;\r\n\r\n    @media(max-width: 767px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    font-size: 20px;\r\n    padding: 20px;\r\n    margin: 0;\r\n\r\n    @media(max-width: 767px) {\r\n        font-size: 20px;\r\n        padding: 10px;\r\n        margin: 0;\r\n    }\r\n`;\r\n\r\nexport const List = styled.div`\r\n    @media(max-width: 767px) {\r\n        padding: 10px;\r\n    }\r\n`;","import React from \"react\";\r\nimport { SectionBody, Header, Title, List } from \"./styled\";\r\n\r\nconst Section = ({title, body, extraHeaderContent}) => (\r\n    <SectionBody>\r\n        <Header>\r\n          <Title>{title}</Title>\r\n            {extraHeaderContent}\r\n        </Header>\r\n        <List>\r\n            {body}\r\n        </List>\r\n      </SectionBody>\r\n);\r\n\r\nexport default Section;","import React from \"react\";\r\n\r\nconst Header = ({ title }) => (\r\n  <header>\r\n    <h1>{title}</h1>\r\n  </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Main = styled.main`\r\n    max-width: 950px;\r\n    padding: 30px;\r\n    margin: 0 auto;\r\n\r\n    @media (max-width: 767px) {\r\n        padding: 10px;  \r\n    }\r\n`;","import React from \"react\";\r\nimport { Main } from \"./styled\"\r\n\r\nconst Container = ({ children }) => (\r\n    <Main>\r\n        {children}\r\n    </Main>\r\n);\r\n\r\nexport default Container;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport Form from \"./Form\";\r\nimport TaskList from \"./TasksList\";\r\nimport Buttons from './Buttons';\r\nimport Section from '../../common/Section';\r\nimport Header from '../../common/Header';\r\nimport Container from '../../common/Container';\r\nimport { useTasks } from '../../useTasks';\r\n\r\nfunction Tasks() {\r\n  \r\n  const { addNewTask } = useTasks();\r\n\r\n  return (\r\n    <Container className=\"container\">\r\n      <Header title=\"Lista zadaÅ„\" />\r\n      <Section\r\n        title=\"Dodaj nowe zadanie\"\r\n        body={<Form addNewTask={addNewTask} />}\r\n      />\r\n\r\n      <Section\r\n        title=\"Lista zadaÅ„\"\r\n        body={\r\n          <TaskList/>\r\n        }\r\n        extraHeaderContent={\r\n          <Buttons/>\r\n        }\r\n      />\r\n\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Tasks;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport function useTasks() {\r\n   const [tasks, setTasks] = useState(\r\n        JSON.parse(localStorage.getItem(\"tasks\")) || []);\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n    }, [tasks]);\r\n\r\n    const addNewTask = (content) => {\r\n        setTasks(tasks => [\r\n            ...tasks,\r\n            {\r\n                content,\r\n                done: false,\r\n                id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\r\n            }\r\n        ]);\r\n    };\r\n\r\n    return ({tasks, addNewTask });\r\n\r\n}","import React from \"react\";\r\nimport Tasks from \"./features/tasks/Tasks\"\r\n\r\nexport default () => <Tasks />;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    }\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { Provider } from 'react-redux';\nimport { GlobalStyle } from \"./GlobalStyle\"\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <GlobalStyle />\n      <App />\n    </Provider>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}